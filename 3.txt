def selection_sort(arr):
    n = len(arr)
    for i in range(n - 1):
        small = i  
        for j in range(i + 1, n):
            if arr[j] < arr[small]:
                small = j
        arr[i], arr[small] = arr[small], arr[i]

def print_arr(arr):
    for elem in arr:
        print(elem, end=" ")
    print()

if __name__ == "__main__":
    n = int(input("Enter the number of elements in the array: "))
    arr = []
    print("Enter the elements of the array:")
    for _ in range(n):
        elem = int(input())
        arr.append(elem)

    print("Before sorting array elements are - ")
    print_arr(arr)
    selection_sort(arr)
    print("After sorting array elements are - ")
    print_arr(arr)
++++++++++++++++++++++++++++++++++++++

def job_scheduling(jobs):
    jobs.sort(key=lambda x: x[2], reverse=True)
    max_deadline = max(jobs, key=lambda x: x[1])[1]
    result = [-1] * (max_deadline + 1)
    total_profit = 0
    for job in jobs:
        for j in range(job[1], 0, -1):
            if result[j] == -1:
                result[j] = job[0]
                total_profit += job[2]
                break
    return result[1:], total_profit

def take_input():
    jobs = []
    n = int(input("Enter the number of jobs: "))
    for i in range(n):
        name = input("Enter job name: ")
        deadline = int(input("Enter deadline for job {}: ".format(name)))
        profit = int(input("Enter profit for job {}: ".format(name)))
        jobs.append((name, deadline, profit))
    return jobs

print("Enter details for each job:")
jobs = take_input()
schedule, total_profit = job_scheduling(jobs)
print("Scheduled Jobs:", schedule)
print("Total profit:", total_profit)

a2100 b119 c227 d125 e315



+++++++++++++++++++++++++++++++++++++++++++++++++++
class Graph:
    def __init__(self):
        self.graph = []

    def add_edge(self, u, v, w):
        self.graph.append([u, v, w])

    def minimum_spanning_tree(self):
        self.graph.sort(key=lambda x: x[2])

        parent = {}  
        rank = {}   
        result = []
        total_cost = 0

        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]

        def union(x, y):
            root_x = find(x)
            root_y = find(y)

            if rank[root_x] < rank[root_y]:
                parent[root_x] = root_y
            elif rank[root_x] > rank[root_y]:
                parent[root_y] = root_x
            else:
                parent[root_y] = root_x
                rank[root_x] += 1

        for u, v, w in self.graph:
            if u not in parent:
                parent[u] = u
                rank[u] = 0
            if v not in parent:
                parent[v] = v
                rank[v] = 0

            if find(u) != find(v):
                union(u, v)
                result.append((u, v, w))
                total_cost += w

        return result, total_cost

def take_input():
    edges = int(input("Enter the number of edges: "))
    g = Graph()
    print("Enter edges in the format 'source destination weight': ")
    for _ in range(edges):
        u, v, w = input().split()
        g.add_edge(u, v, int(w))
    return g

print("Enter graph details:")
graph = take_input()
mst_edges, total_cost = graph.minimum_spanning_tree()
print("Minimum Spanning Tree edges using simple approach:")
for edge in mst_edges:
    print(edge)
print("Total cost of Minimum Spanning Tree:", total_cost)


ab6
bc4
cd15
ad10
ac5

++++++++++++++++++++++++++++++++++++++++++++++++++++++++
class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.vertices_dict = {}  
        self.graph = [[] for _ in range(vertices)]

    def add_edge(self, u, v, w):
        u_index = self.get_vertex_index(u)
        v_index = self.get_vertex_index(v)
        self.graph[u_index].append((v_index, w))
        self.graph[v_index].append((u_index, w))

    def get_vertex_index(self, vertex):
        if vertex not in self.vertices_dict:
            index = len(self.vertices_dict)
            self.vertices_dict[vertex] = index
            return index
        return self.vertices_dict[vertex]

    def prim_mst(self):
        visited = [False] * self.V
        key = [float('inf')] * self.V
        parent = [-1] * self.V

        key[0] = 0
        parent[0] = -1

        for _ in range(self.V):
            u = self.min_key(key, visited)
            visited[u] = True

            for v, weight in self.graph[u]:
                if not visited[v] and weight < key[v]:
                    key[v] = weight
                    parent[v] = u

        mst_edges = []
        total_cost = 0
        for i in range(1, self.V):
            mst_edges.append((self.get_vertex_name(parent[i]), self.get_vertex_name(i), key[i]))
            total_cost += key[i]
        return mst_edges, total_cost

    def min_key(self, key, visited):
        min_val = float('inf')
        min_index = -1

        for v in range(self.V):
            if not visited[v] and key[v] < min_val:
                min_val = key[v]
                min_index = v

        return min_index

    def get_vertex_name(self, index):
        for name, idx in self.vertices_dict.items():
            if idx == index:
                return name

def take_input():
    vertices = int(input("Enter the number of vertices: "))
    edges = int(input("Enter the number of edges: "))
    g = Graph(vertices)
    print("Enter edges in the format 'source destination weight': ")
    for _ in range(edges):
        u, v, w = input().split()
        g.add_edge(u, v, int(w)) 
    return g
print("Enter graph details:")
graph = take_input()
mst_edges, total_cost = graph.prim_mst()
print("Minimum Spanning Tree edges using Prim's algorithm:")
for edge in mst_edges:
    print(edge)
print("Total cost of Minimum Spanning Tree:", total_cost)

6, 10
sa12
sb8
ab9
ac22
ae11
be14
cd15
ce18
ed3
bc16
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
class Graph:
    def __init__(self):
        self.graph = []

    def add_edge(self, u, v, w):
        self.graph.append((u, v, w))

    def minimum_spanning_tree(self):
        self.graph.sort(key=lambda x: x[2])

        parent = {}  
        rank = {}    
        result = []
        total_cost = 0

        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]

        def union(x, y):
            root_x = find(x)
            root_y = find(y)

            if rank[root_x] < rank[root_y]:
                parent[root_x] = root_y
            elif rank[root_x] > rank[root_y]:
                parent[root_y] = root_x
            else:
                parent[root_y] = root_x
                rank[root_x] += 1

        for u, v, w in self.graph:
            if u not in parent:
                parent[u] = u
                rank[u] = 0
            if v not in parent:
                parent[v] = v
                rank[v] = 0

            if find(u) != find(v):
                union(u, v)
                result.append((u, v, w))
                total_cost += w

        return result, total_cost

def take_input():
    edges = int(input("Enter the number of edges: "))
    g = Graph()
    print("Enter edges in the format 'source destination weight': ")
    for _ in range(edges):
        u, v, w = input().split()
        g.add_edge(u, v, int(w))
    return g

print("Enter graph details:")
graph = take_input()
mst_edges, total_cost = graph.minimum_spanning_tree()
print("Minimum Spanning Tree edges using Kruskal's algorithm:")
for edge in mst_edges:
    print(edge)
print("Total cost of Minimum Spanning Tree:", total_cost)

10
ab6
ag15
bd5
bc11
gc25
gf12
cd17
cf9
de22
ef10
++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import heapq

def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    priority_queue = [(0, start)]
    predecessors = {node: None for node in graph}

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        if current_distance > distances[current_node]:
            continue

        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
           
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                predecessors[neighbor] = current_node
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances, predecessors

def shortest_path(predecessors, start, end):
   
    path = []
    current_node = end
    while current_node is not None:
        path.insert(0, current_node)
        current_node = predecessors[current_node]
    return path

def main():
    
    num_vertices = int(input("Enter the number of vertices: "))
    num_edges = int(input("Enter the number of edges: "))

    graph = {}

    for _ in range(num_edges):
        start, end, weight = input("Enter start node, end node, and weight separated by space: ").split()
       
        if start not in graph:
            graph[start] = {}
        if end not in graph:
            graph[end] = {}
        graph[start][end] = int(weight)
        graph[end][start] = int(weight)  
  
    start_node = input("Enter the start node: ")
  
    shortest_distances, predecessors = dijkstra(graph, start_node)

    print("Shortest distances from node", start_node + ":")
    for node, distance in shortest_distances.items():
        print("To node", node + ":", distance)

if __name__ == "__main__":
    main()

6,8
sa6
sd8
se7
ab9
bc12
cd3
ce5
de10
s
